sort LocSort_product = struct loc_product_s1 | loc_product_s2 | loc_product_s3 | loc_product_s4 | loc_product_s5 | loc_product_s6 | loc_product_s7 | loc_product_s8 | loc_product_s9 | loc_product_s10 | loc_product_s11 | loc_product_s12 | loc_product_s13 | loc_product_s14 | loc_product_s15 | loc_product_s16 | loc_product_s17 | loc_product_s18;

proc BehProc_product(Locvar_product : LocSort_product) =
  (Locvar_product == loc_product_s1) -> prepareB . BehProc_product(loc_product_s2) +
  (Locvar_product == loc_product_s1) -> prepareA . BehProc_product(loc_product_s3) +
  (Locvar_product == loc_product_s2) -> prepareA . BehProc_product(loc_product_s4) +
  (Locvar_product == loc_product_s3) -> prepareB . BehProc_product(loc_product_s4) +
  (Locvar_product == loc_product_s3) -> switchA . BehProc_product(loc_product_s5) +
  (Locvar_product == loc_product_s4) -> switchA . BehProc_product(loc_product_s6) +
  (Locvar_product == loc_product_s5) -> prepareB . BehProc_product(loc_product_s6) +
  (Locvar_product == loc_product_s5) -> eatA . BehProc_product(loc_product_s7) +
  (Locvar_product == loc_product_s6) -> switchB . BehProc_product(loc_product_s8) +
  (Locvar_product == loc_product_s6) -> eatA . BehProc_product(loc_product_s9) +
  (Locvar_product == loc_product_s7) -> prepareB . BehProc_product(loc_product_s9) +
  (Locvar_product == loc_product_s7) -> prepareA . BehProc_product(loc_product_s12) +
  (Locvar_product == loc_product_s8) -> eatB . BehProc_product(loc_product_s14) +
  (Locvar_product == loc_product_s8) -> eatA . BehProc_product(loc_product_s10) +
  (Locvar_product == loc_product_s9) -> switchB . BehProc_product(loc_product_s10) +
  (Locvar_product == loc_product_s9) -> prepareA . BehProc_product(loc_product_s13) +
  (Locvar_product == loc_product_s10) -> eatB . BehProc_product(loc_product_s1) +
  (Locvar_product == loc_product_s10) -> prepareA . BehProc_product(loc_product_s11) +
  (Locvar_product == loc_product_s11) -> eatB . BehProc_product(loc_product_s3) +
  (Locvar_product == loc_product_s11) -> switchA . BehProc_product(loc_product_s17) +
  (Locvar_product == loc_product_s12) -> prepareB . BehProc_product(loc_product_s13) +
  (Locvar_product == loc_product_s13) -> switchB . BehProc_product(loc_product_s11) +
  (Locvar_product == loc_product_s14) -> prepareB . BehProc_product(loc_product_s18) +
  (Locvar_product == loc_product_s14) -> eatA . BehProc_product(loc_product_s1) +
  (Locvar_product == loc_product_s15) -> switchB . BehProc_product(loc_product_s10) +
  (Locvar_product == loc_product_s15) -> eatB . BehProc_product(loc_product_s7) +
  (Locvar_product == loc_product_s15) -> prepareA . BehProc_product(loc_product_s16) +
  (Locvar_product == loc_product_s16) -> switchB . BehProc_product(loc_product_s11) +
  (Locvar_product == loc_product_s16) -> eatB . BehProc_product(loc_product_s12) +
  (Locvar_product == loc_product_s17) -> switchB . BehProc_product(loc_product_s8) +
  (Locvar_product == loc_product_s17) -> eatB . BehProc_product(loc_product_s5) +
  (Locvar_product == loc_product_s17) -> eatA . BehProc_product(loc_product_s15) +
  (Locvar_product == loc_product_s18) -> eatA . BehProc_product(loc_product_s2);

act prepareB, renamed_prepareB, prepareA, renamed_prepareA, switchA, renamed_switchA, eatA, renamed_eatA, switchB, renamed_switchB, eatB, renamed_eatB;

init BehProc_product(loc_product_s1);
