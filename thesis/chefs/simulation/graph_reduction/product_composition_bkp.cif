controllable prepareB;
controllable eatB;
controllable switchB;
automaton B:
  alphabet prepareB, eatB, switchB;
  location s1:
    initial;
    marked;
    edge prepareB goto s2;
  location s2:
    marked;
    edge switchB goto s3;
  location s3:
    marked;
    edge eatB goto s1;
end
controllable prepareA;
controllable eatA;
controllable switchA;
automaton A:
  alphabet prepareA, eatA, switchA;
  location s1:
    initial;
    marked;
    edge prepareA goto s2;
  location s2:
    marked;
    edge switchA goto s3;
  location s3:
    marked;
    edge eatA goto s1;
end

automaton mon:
	monitor;
	location s1:
		initial;
		marked;
		edge prepareB goto s3;
		edge eatA goto s2;
		edge eatB goto s2;
	location s2:
		marked;
		edge prepareA goto s3;
		edge prepareB goto s3;
		edge eatA goto s1;
		edge eatB goto s1;
	location s3:
		marked;
		edge switchA goto s1;
		edge eatB goto s1;
end

invariant switchB needs (not mon.s3 or not A.s1 or not B.s2) and (not mon.s3 or not A.s2 or not B.s2) and (not mon.s3 or not A.s3 or not B.s2);

invariant switchA needs (not mon.s1 or not A.s2 or not B.s1) and (not mon.s3 or not A.s2 or not B.s3);

invariant eatA needs (not mon.s1 or not A.s3 or not B.s2);
